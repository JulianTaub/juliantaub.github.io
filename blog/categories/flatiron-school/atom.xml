<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;school | The Bitwise Malandro]]></title>
  <link href="http://juliantaub.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://juliantaub.github.io/"/>
  <updated>2015-06-07T23:05:54-04:00</updated>
  <id>http://juliantaub.github.io/</id>
  <author>
    <name><![CDATA[Julian Taub]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keeping Your Project Organized and Focused]]></title>
    <link href="http://juliantaub.github.io/blog/2015/06/07/keeping-your-project-organized-and-focused/"/>
    <updated>2015-06-07T22:17:48-04:00</updated>
    <id>http://juliantaub.github.io/blog/2015/06/07/keeping-your-project-organized-and-focused</id>
    <content type="html"><![CDATA[<p><img src="http://www.leaguelineup.com/ragehockeyclub/images/disorganized_1.jpg" alt="clutter" /></p>

<p>Project ideas can easily get overwhelming and complicated when going from initial thought to reality. This is even more true when working in a group.</p>

<p>Here are a few tips to help get ahead of the curve and be on point when building a project from the ground up:</p>

<h3>1. Set a strict deadline and figure out if you can get done a simple, base-case version of the idea within that time</h3>

<p>When do you need to get this hack done by? A week? A month? Make sure you stick to whatever date you pick. Don’t give yourself wiggle room (at least at the beginning), as you might be tempted to take advantage of it.</p>

<p>Pair down your idea, stripping away layer after layer, until you get at the core of what you’re trying to accomplish. And then build from there. Weigh each feature of the project to estimate how feasible it would be.</p>

<h3>2. Sketch a flow of how a user would interact with your app, and how the app would respond to the user. Design the infrastructure around this flow</h3>

<p>When someone visits your app, what would be the first thing that they would see? Where would they go from there? How would they use your project in their life. What would they click on, and what do they expect it return?</p>

<p>All these questions need to be answered to figure out what the app will look like and what it will contain. Also, come to piece with the fact that you might not get this right the first time. Programming shows us how both intuitive and error-prone we all are. Constantly evaluating the app flow after every change in the project can get us closer and closer to the truth.</p>

<h3>3. Collect resources and tutorials about the technologies you may use for the project</h3>

<p>The programming community is very collaborative and there are tons of free resources available. Take advangtage of that fact. Everyone comes across errors and bugs that baffle them from time to time so get comfortable reading documentation and looking up answers to broken code on forums like Stackoverflow.com</p>

<h3>4. Create each new feature on a separate git branch. Only merge to master after a thorough inspection</h3>

<p>Not only will this help you prevent team members from working on the same issues at the same time and creating overwhelming code, but it allows you to make an easy-to-track progression of how your project was built.</p>

<h3>5. Write out the code you want to have in the comments. Use it to form the code you will have</h3>

<p>Writing out the comments first allows you to verbalize to yourself, and your teammates, what kind of logic you need to implement, as well as what variables you have access to.</p>

<h3>6. Hack away at the problems in the code until you’re exhausted, then hack away some more</h3>

<p>Jump right into the thick of the code and swim your way through it. Keep practicing figuring out things in the moment, adapting to each situation as it comes. If it’s not working, push yourself to think about it a different way, and question your assumptions.</p>

<h3>7. Figure out what job each part of your app is supposed to have, and partition their functionality</h3>

<p>Think of every piece of your app as an object that serves a specific purpose and a role to play. Defining that purpose can help make your code cleaner and narrow down where the error might be located when they pop up.</p>

<h3>8. Always ask for feedback</h3>

<p>A new fresh set of eyes can do wonders to your project’s progress. As well as challege your assumptions about the way things need to work.</p>

<h3>9. Delay the desire to abstract until after it’s already working</h3>

<p>Abstraction is important, and can help us hone in on programatic thinking and effecient design patterns, but the wrong abstraction will cost you dearly. Make sure your code is nearing its final form before you start making it look clean and pretty.</p>

<h3>10. Work on the frontend last, and split up the workload</h3>

<p>It’s important to have a good app styling and branding, but without a solid and robust backend holding it up, the project can become brittle and unpredictable easily.</p>

<p>Also, even when you approach styling last, proceed with caution. Frontend styling is usually applied across every page of an app, so any merge conflicts can get messy fast. Make sure anybody working on frontend is working on a specific goal on a feature branch and that their tasks don’t overlap with anyone else on the team.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tooling and Tasks: Configuring the Odds in Your Favor]]></title>
    <link href="http://juliantaub.github.io/blog/2015/05/18/tooling-and-tasks-the-tricks-of-the-trade/"/>
    <updated>2015-05-18T19:08:20-04:00</updated>
    <id>http://juliantaub.github.io/blog/2015/05/18/tooling-and-tasks-the-tricks-of-the-trade</id>
    <content type="html"><![CDATA[<p>Nothing gives you the edge more than creating your own toolbox to problem solve faster and more effienciently. As developers, we want to go in, keyboards blazing. But going through the motions of setting things up can easily get in your way.</p>

<p>Building up a treasure trove of smart tasks and shortcuts abstracts away a lot dirty work, so that you can focus on the bigger picture. You can set up tasks to automate all facets of your interaction with a program: the front end, back end, and even the keyboard. Here are some shortcuts I&rsquo;ve been exploring:</p>

<h2>Back End:</h2>

<h2>Rake Tasks</h2>

<p>Rake tasks are part and parcel of the rails framework, but you can easily set up your own custom ones.</p>

<p>You can create tasks that load different environments, install themes, generate templates, seed data, organize folders, and clean up unwanted files.</p>

<p>All the tasks will be stored in a RakeFile, where you can handpick what gems and dependencies are required.</p>

<p>Rake uses an intuitive and abstracted language to explain your tasks clearly. For example, a task making a new postmay look like:</p>

<pre><code class="ruby">desc "Makes new blog post"
task :generate_post do
  # makes a new post by targeting a directory and adding a new file with predetermined markup. 
    .....
  end
</code></pre>

<p>Or to preview a simulation</p>

<pre><code class="ruby">desc "Starts simulation"
task :simulate do
  # loads environment, starts server and runs scripts 
    .....
  end
</code></pre>

<h3>Gems</h3>

<p>Extending your built in functionality is important in creating an awesome and robust program that feels intuitive.</p>

<p>Gems are stored in the Gemfile, which is created during the bundle install command in the Terminal. Their dependencies and versions are safeguarded by the Gemfile.lock file.</p>

<p>Some cool and useful gems I&rsquo;ve come across:</p>

<p><a href="https://github.com/elastic/logstash">Logstash</a><br/>
<a href="https://github.com/whitesmith/rubycritic">RubyCritic</a><br/>
<a href="https://github.com/stympy/faker">Faker</a><br/>
And lots more gems on the <a href="http://rubygems.org">Ruby Gems</a> website.</p>

<h2>Front End</h2>

<h3>Gruntfile.js</h3>

<p>Grunt runs tasks with javascript using Node.js. It can run asynchronous tasks, check for typos in syntax, uglify files, and generate JSON. There are also tons of <a href="http://gruntjs.com/plugins">plugins</a> available for Grunt. Here are some good tutorials on how to start installing a using it:</p>

<p><a href="http://gruntjs.com/getting-started">Grunt: Getting Started</a><br/>
<a href="https://quickleft.com/blog/grunt-js-the-basics/">Grnt.js: The Basics</a></p>

<h2>Text Editors</h2>

<p>Both <a href="http://www.sublimetext.com/">Sublime Text</a> and <a href="https://atom.io/">Atom</a> have awesome autocompletion and snippets, however Sublime gets annoying quickly with popups to purchase their product, while atom is free.</p>

<p>To the more hardcore programmers, the solution is either Vim or Emacs. Vim has a lot of shortcuts and starts with them as default, and emacs allows you to customize commands across many platforms. You can learn about both in the links below:</p>

<p><a href="http://www.openvim.com/">Interactive Vim Tutorial</a><br/>
<a href="http://www.jesshamrick.com/2012/09/10/absolute-beginners-guide-to-emacs/">Absolute Beginner&rsquo;s Guide to Emacs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Bitwise Manifesto: What Is a Malandro?]]></title>
    <link href="http://juliantaub.github.io/blog/2015/04/29/intro-post-what-is-a-malandro/"/>
    <updated>2015-04-29T17:28:04-04:00</updated>
    <id>http://juliantaub.github.io/blog/2015/04/29/intro-post-what-is-a-malandro</id>
    <content type="html"><![CDATA[<p><img src="http://umbandaeucurto.com/wp-content/uploads/2013/08/Jorge_07_Ze_Pilintra_umbandaeucurto-610x259.jpg" alt="Picture of Ze Pilintra, fokloric trickster character of the Umbanda religion of Brazil" /></p>

<p>In Brazilian culture, the word “malandro” can be a very controversial term. It’s usually has the connotation of a rogue, a gutter-punk, or a trickster. Someone who is very devious and dosen’t play by the rules. They follow a way of life called “malandragem,” or getting the advantage by any means possible.</p>

<p>It evokes a bit of a bad-boy persona, one that’s memorialized in songs and folklore.</p>

<p><img src="http://1.bp.blogspot.com/-rssJ7W8AOjs/UceTG6hv8bI/AAAAAAAAA8Q/z-LvVFOnUFY/s1600/malandragem.png" title="Translation: 'Faith, love and charity. Save trickery.'" alt="Brazilian translation: 'Faith, love and charity. Save trickery.' (or, alrenatively, 'Save badassery.')" /></p>

<p>But in martial arts like capoeira, malandro and malandragem has a much more positive meaning.</p>

<p><img src="http://www.thisbusinessofdanceandmusic.com/images/kick.jpg" alt="Picture of capoeira fight" /></p>

<p>There it describes someone who is extremely versatile and can problem solve on cue. Fluid situational awareness and unconventional problem solving then take on an almost positive quality.</p>

<p>The word “hacker” can be just as controversial. In the programming community, hackers are inventive makers and testers, participating in a vibrant collaborative community. To the outside world, hackers are malcontents and thieves, bent on destroying people’s online lives and corrupt their data for laughs.</p>

<p><img src="http://media.giphy.com/media/FnGJfc18tDDHy/giphy.gif" alt="Hack the Planet gif" /></p>

<p>Sometimes the steretype gets taken to the extreme…</p>

<p><img src="http://i.imgur.com/b8jN6tv.gif" alt="Hacking in progress gif" /></p>

<p>Hackers are a lot like malandros - they make things work, adapting to problems and systems at the tip of a fedora with everything they have on hand in any way they can. There’s no straight and narrow thinking - just bubbly, shapeshifting inventness.</p>

<p>And on the topic of hacking the planet, here are some awesome worldwide and national hackathons:<br/>
<a href="https://2015.spaceappschallenge.org/">NASA Space Apps Challenge</a><br/>
<a href="https://2015.battlehack.org/">BattleHack</a><br/>
<a href="http://opendataday.org/">International Open Data Hackathon</a><br/>
<a href="https://www.codeforamerica.org/">Code for America</a></p>

<p>Oi malandro e malandro! - A malandro is a malandro!</p>
]]></content>
  </entry>
  
</feed>
